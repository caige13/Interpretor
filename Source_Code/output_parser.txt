test1.txt:

looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <num:string>
looked up with symbol's scope num
Define: <num:string>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <i:integer>
looked up with symbol's scope i
Define: <i:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <sum:integer>
looked up with symbol's scope sum
Define: <sum:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <x:integer>
looked up with symbol's scope x
Define: <x:integer>
Defined while1
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <i:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <num:neutral>
looked up with symbol's scope while1
looked up with symbol's scope while1
Var Lookup: <sum:integer>
looked up with symbol's scope main
Var Lookup: <sum:integer>
looked up with symbol's scope while1
looked up with symbol's scope while1
Var Lookup: <x:integer>
looked up with symbol's scope main
Var Lookup: <x:integer>
looked up with symbol's scope while1
looked up with symbol's scope while1
Var Lookup: <sum:integer>
looked up with symbol's scope main
Var Lookup: <sum:integer>
deleting while1
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <sum:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <num:neutral>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <q:integer>
looked up with symbol's scope q
Define: <q:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <sum:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <r:integer>
looked up with symbol's scope r
Define: <r:integer>
Valid Program

test2.txt:

Defined functionName
looked up with symbol's scope functionName
Define: <a:undefined>
looked up with symbol's scope functionName
Define: <b:undefined>
looked up with symbol's scope functionName
Define: <c:undefined>
looked up with symbol's scope functionName
looked up with symbol's scope functionName
Var Lookup: <a:neutral>
looked up with symbol's scope functionName
looked up with symbol's scope functionName
Var Lookup: <d:integer>
looked up with symbol's scope d
Define: <d:integer>
Defined while1
looked up with symbol's scope functionName
looked up with symbol's scope functionName
Var Lookup: <d:integer>
looked up with symbol's scope while1
looked up with symbol's scope while1
Var Lookup: <d:integer>
looked up with symbol's scope functionName
Var Lookup: <d:integer>
looked up with symbol's scope while1
looked up with symbol's scope while1
Var Lookup: <d:integer>
looked up with symbol's scope functionName
Var Lookup: <d:integer>
deleting while1
looked up with symbol's scope functionName
looked up with symbol's scope functionName
Var Lookup: <d:neutral>
Lex Error: Unexpected character '`' on line 12

test3.txt:

Defined name1
looked up with symbol's scope name1
Define: <a:undefined>
looked up with symbol's scope name1
Define: <b:undefined>
looked up with symbol's scope name1
Define: <c:undefined>
looked up with symbol's scope name1
looked up with symbol's scope name1
Var Lookup: <b:integer>
Define: <b:integer>
looked up with symbol's scope name1
looked up with symbol's scope name1
Var Lookup: <c:integer>
Define: <c:integer>
looked up with symbol's scope name1
looked up with symbol's scope name1
Var Lookup: <a:integer>
Define: <a:integer>
looked up with symbol's scope name1
looked up with symbol's scope name1
Var Lookup: <b:integer>
looked up with symbol's scope name1
looked up with symbol's scope name1
Var Lookup: <a:neutral>
Updated name1's return type to true
looked up with symbol's scope name1
looked up with symbol's scope name1
Var Lookup: <a:integer>
Updated name1's return type to integer
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <k:string>
looked up with symbol's scope k
Define: <k:string>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <n:string>
looked up with symbol's scope n
Define: <n:string>
Defined for1
looked up with symbol for1
Define: <i:integer>
looked up with symbol's scope for1
looked up with symbol's scope for1
Var Lookup: <i:integer>
looked up with symbol's scope for1
looked up with symbol's scope for1
Var Lookup: <i:integer>
Defined for2
looked up with symbol for2
Define: <j:integer>
looked up with symbol's scope for2
looked up with symbol's scope for2
Var Lookup: <j:integer>
looked up with symbol's scope for2
looked up with symbol's scope for2
Var Lookup: <j:integer>
looked up with symbol's scope for2
looked up with symbol's scope for2
Var Lookup: <i:integer>
looked up with symbol's scope for1
Var Lookup: <i:integer>
looked up with symbol's scope for2
looked up with symbol's scope for2
Var Lookup: <j:integer>
looked up with symbol's scope for2
looked up with symbol's scope for2
Var Lookup: <j:integer>
looked up with symbol's scope for2
looked up with symbol's scope for2
Var Lookup: <i:neutral>
looked up with symbol's scope for1
Var Lookup: <i:neutral>
looked up with symbol's scope for2
looked up with symbol's scope for2
Var Lookup: <j:neutral>
deleting for2
deleting for1
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <abc:integer>
looked up with symbol's scope abc
Define: <abc:integer>
looked up name1
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <abc:neutral>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <d:integer>
looked up with symbol's scope d
Define: <d:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <d:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <abc:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <d:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <y:integer>
looked up with symbol's scope y
Define: <y:integer>
looked up name1
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <d:neutral>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <y:neutral>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <f:integer>
looked up with symbol's scope f
Define: <f:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <a:integer>
looked up with symbol's scope a
Define: <a:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <a:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <c:string>
looked up with symbol's scope c
Define: <c:string>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <c:string>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <b:string>
looked up with symbol's scope b
Define: <b:string>
Defined while1
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <d:integer>
looked up with symbol's scope while1
looked up with symbol's scope while1
Var Lookup: <a:neutral>
looked up with symbol's scope main
Var Lookup: <a:neutral>
looked up with symbol's scope while1
looked up with symbol's scope while1
Var Lookup: <d:integer>
looked up with symbol's scope main
Var Lookup: <d:integer>
looked up with symbol's scope while1
looked up with symbol's scope while1
Var Lookup: <d:integer>
looked up with symbol's scope main
Var Lookup: <d:integer>
deleting while1
Valid Program

test4.txt:

Defined increment
looked up with symbol's scope increment
Define: <a:undefined>
looked up with symbol's scope increment
looked up with symbol's scope increment
Var Lookup: <a:integer>
Define: <a:integer>
looked up with symbol's scope increment
looked up with symbol's scope increment
Var Lookup: <a:integer>
Updated increment's return type to true
looked up with symbol's scope increment
looked up with symbol's scope increment
Var Lookup: <a:integer>
Updated increment's return type to integer
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <d:integer>
looked up with symbol's scope d
Define: <d:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <d:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <d:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <d:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <d:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <d:integer>
looked up increment
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <d:neutral>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <j:integer>
looked up with symbol's scope j
Define: <j:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <d:neutral>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <d:integer>
looked up with symbol's scope main
looked up with symbol's scope main
Var Lookup: <d:neutral>
Valid Program